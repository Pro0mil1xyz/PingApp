@page "/MyComponents/grouppinger"
@using PingApp.Models
@using PingApp.Repositories
@using System.Net.Sockets;
@inject IDeviceRepository DeviceRepository
@inject IDeviceGroupRepository DeviceGroupRepository
@inject ICategoryRepository CategoryRepository
@inject IPingRepository PingRepository

<div>
    <div class="grupowe">

        <div class="grupowePING">
            Wybierz grupę:
            @if (DeviceGroupList == null || !DeviceGroupList.Any())
            {
                <p>Ładowanie grup urządzeń...</p>
            }
            else
            {
                <select @bind="SelectedGroupId">
                    <option value="">Wybierz grupę...</option>
                    @foreach (var group in DeviceGroupList)
                    {
                        <option value="@group.Id">@group.GroupName</option>
                    }
                </select>
            }
            <br />
            Wybierz kategorię:
            @if (CategoryList == null || !CategoryList.Any())
            {
                <p>Ładowanie kategorii...</p>
            }
            else
            {
                <select @bind="SelectedCategoryId">
                    <option value="">Wybierz kategorię...</option>
                    @foreach (var category in CategoryList)
                    {
                        <option value="@category.Id">@category.CategoryName</option>
                    }
                </select>
            }

            <br />

            <button @onclick="ReloadDevices">Załaduj urządzenia</button>
            <button @onclick="StartPing">Pinguj wszystkie urządzenia</button>
            <button class="btn btn-danger" @onclick="CancelPing">STOP PING</button>
        </div>

        <div class="ladowanie">
            @if (IsPingInProgress)
            {
                <div class="loader-container">
                    <div class="loaderdot"></div>
                </div>
            }
            else if (WasPingCancelled)
            {
                <div class="ping-summary">
                    <p style="color: darkorange; font-weight: bold;">⚠️ Pingowanie zatrzymane!</p>
                </div>
            }
            else if (PingResults.Count > 0)
            {
                <div class="ping-summary">
                    Podsumowanie:
                    <p>✅ Online: <b>@Devices.Count(d => PingResults.ContainsKey(d.Id) && PingResults[d.Id].Contains("Success"))</b></p>
                    <p>❌ Offline: <b>@Devices.Count(d => PingResults.ContainsKey(d.Id) && !PingResults[d.Id].Contains("Success"))</b></p>
                    <p>📌 Łącznie: <b>@Devices.Count</b></p>
                </div>
            }
        </div>

    </div>

    <div class="grupoweping-tab">
        <div class="scrollable-table-container-grouppinger">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Status</th>

                        <th @onclick="@(() => SortTable("Name"))" style="cursor: pointer;">
                            Nazwa urządzenia
                            @if (CurrentSortColumn == "Name")
                            {
                                <span>@(SortAscending ? "↑" : "↓")</span>
                            }
                        </th>

                        <th @onclick="@(() => SortTable("IP"))" style="cursor: pointer;">
                            Adres IP
                            @if (CurrentSortColumn == "IP")
                            {
                                <span>@(SortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var device in SortedDevices)
                    {
                        <tr>
                            <td>@GetStatusMarkup(device)</td>
                            <td>@device.Name</td>
                            <td>@device.IPAddress</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Device> Devices = new();
    private Dictionary<int, string> PingResults = new();
    private bool IsPingInProgress = false;
    private bool WasPingCancelled = false;
    private List<DeviceGroup> DeviceGroupList = new();
    private List<Category> CategoryList = new();
    private int? SelectedGroupId { get; set; }
    private int? SelectedCategoryId { get; set; }
    private CancellationTokenSource? PingCancellationTokenSource = null;

    private string CurrentSortColumn = "Name";
    private bool SortAscending = true;

    private IEnumerable<Device> SortedDevices => SortDevices(Devices, CurrentSortColumn, SortAscending);

    private void SortTable(string column)
    {
        if (CurrentSortColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            CurrentSortColumn = column;
            SortAscending = true;
        }

        StateHasChanged();
    }

    private IEnumerable<Device> SortDevices(IEnumerable<Device> devices, string column, bool ascending)
    {
        return column switch
        {
            "Name" => ascending ? devices.OrderBy(d => d.Name) : devices.OrderByDescending(d => d.Name),
            "IP" => ascending ? devices.OrderBy(d => d.IPAddress) : devices.OrderByDescending(d => d.IPAddress),
            _ => devices
        };
    }

    private RenderFragment GetStatusMarkup(Device device) => builder =>
    {
        if (PingResults.TryGetValue(device.Id, out var result))
        {
            builder.OpenElement(0, "span");
            builder.AddAttribute(1, "style", $"color:{(result.Contains("Success") ? "green" : "red")}");
            builder.AddContent(2, result.Contains("Success") ? "Online" : "Offline");
            builder.CloseElement();
        }
        else if (IsPingInProgress)
        {
            builder.OpenElement(3, "div");
            builder.AddAttribute(4, "class", "loader");
            builder.CloseElement();
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await ReloadSelectionFields();
    }

    private async Task ReloadSelectionFields()
    {
        DeviceGroupList = (await DeviceGroupRepository.GetAllDeviceGroupsAsync()).ToList();
        CategoryList = (await CategoryRepository.GetAllCategoriesAsync()).ToList();
    }

    private async Task ReloadDevices()
    {
        if (SelectedGroupId.HasValue)
        {
            Devices = (await DeviceRepository.GetDevicesByGroupIdAsync(SelectedGroupId.Value)).ToList();
        }
        else if (SelectedCategoryId.HasValue)
        {
            Devices = (await DeviceRepository.GetDevicesByCategoryIdAsync(SelectedCategoryId.Value)).ToList();
        }
        else
        {
            Devices = new List<Device>();
        }

        PingResults.Clear();
        IsPingInProgress = false;
        WasPingCancelled = false;

        await ReloadSelectionFields();
        StateHasChanged();
    }

    private async Task StartPing()
    {
        try
        {
            PingCancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = PingCancellationTokenSource.Token;

            IsPingInProgress = true;
            WasPingCancelled = false;
            PingResults.Clear();
            await InvokeAsync(StateHasChanged);

            var pingTasks = new List<Task>();
            var semaphore = new SemaphoreSlim(4);  //maksymalna ilość pingów wykonywanych jednocześnie

            foreach (var device in Devices)
            {
                pingTasks.Add(Task.Run(async () =>
                {
                    await semaphore.WaitAsync();

                    try
                    {
                        cancellationToken.ThrowIfCancellationRequested();

                        var result = await PingRepository.PingDeviceAsync(device.IPAddress);
                        if (!WasPingCancelled && !cancellationToken.IsCancellationRequested)
                        {
                            PingResults[device.Id] = result;
                            await PingRepository.SavePingResultAsync(device.IPAddress, device.Id);
                        }
                    }
                    catch (Exception ex)
                    {
                        PingResults[device.Id] = $"Błąd: {ex.Message}";
                    }
                    finally
                    {
                        semaphore.Release();
                        await InvokeAsync(StateHasChanged);
                    }
                }, cancellationToken));
            }

            await Task.WhenAll(pingTasks);
        }
        catch (Exception ex)
        {
            PingResults.Add(-1, $"Krytyczny błąd: {ex.Message}");
        }
        finally
        {
            IsPingInProgress = false;
            await InvokeAsync(StateHasChanged);
            PingCancellationTokenSource?.Dispose();
            PingCancellationTokenSource = null;
        }
    }

    private void CancelPing()
    {
        PingCancellationTokenSource?.Cancel();
        PingCancellationTokenSource?.Dispose();
        PingCancellationTokenSource = null;

        IsPingInProgress = false;
        WasPingCancelled = true;
        PingResults.Clear();

        StateHasChanged();
    }
}
