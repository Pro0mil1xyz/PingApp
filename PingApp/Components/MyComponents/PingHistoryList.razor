@page "/MyComponents/pinghistorylist"
@using PingApp.Models
@using PingApp.Repositories
@inject IPingRepository PingRepository

<h3>Historia Pingów</h3>

@if (pingHistoryItems == null)
{
    <p>Ładowanie historii pingów...</p>
}
else if (!pingHistoryItems.Any())
{
    <p>Brak zapisanych wyników pingowania.</p>
}
else
{
    <div>
        <button class="btn btn-danger" @onclick="DeleteAllPingHistory">⚠️ Usuń całą historię ⚠️</button>
    </div>

    <div class="scrollable-table-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th @onclick="@(() => SortTable("Id"))" style="cursor: pointer;">
                        Id
                        @if (CurrentSortColumn == "Id")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortTable("IPAddress"))" style="cursor: pointer;">
                        Adres IP
                        @if (CurrentSortColumn == "IPAddress")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortTable("DeviceName"))" style="cursor: pointer;">
                        Nazwa Urządzenia
                        @if (CurrentSortColumn == "DeviceName")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortTable("Date"))" style="cursor: pointer;">
                        Data
                        @if (CurrentSortColumn == "Date")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortTable("Status"))" style="cursor: pointer;">
                        Status
                        @if (CurrentSortColumn == "Status")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ping in pingHistoryItems)
                {
                    <tr>
                        <td>@ping.Id</td>
                        <td>@ping.IPAddress</td>
                        <td>@(ping.Device != null ? ping.Device.Name : "Nieznane urządzenie")</td>
                        <td>@ping.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@ping.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<PingHistory> pingHistoryItems = new List<PingHistory>();
    private string CurrentSortColumn = "Date";
    private bool SortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var historyList = await PingRepository.GetAllPingHistoriesAsync();
            pingHistoryItems = historyList ?? new List<PingHistory>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania historii pingów: {ex.Message}");
            pingHistoryItems = new List<PingHistory>();
        }
    }

    private void SortTable(string column)
    {
        if (CurrentSortColumn == column)
        {
            SortAscending = !SortAscending; // Odwrócenie sortowania
        }
        else
        {
            CurrentSortColumn = column;
            SortAscending = true; // Domyślnie sortowanie rosnące
        }

        pingHistoryItems = SortPingHistory(pingHistoryItems, CurrentSortColumn, SortAscending);
    }

    private IEnumerable<PingHistory> SortPingHistory(IEnumerable<PingHistory> pingHistory, string column, bool ascending)
    {
        return column switch
        {
            "Id" => ascending ? pingHistory.OrderBy(p => p.Id) : pingHistory.OrderByDescending(p => p.Id),
            "IPAddress" => ascending ? pingHistory.OrderBy(p => p.IPAddress) : pingHistory.OrderByDescending(p => p.IPAddress),
            "DeviceName" => ascending ? pingHistory.OrderBy(p => p.Device?.Name) : pingHistory.OrderByDescending(p => p.Device?.Name),
            "Date" => ascending ? pingHistory.OrderBy(p => p.Date) : pingHistory.OrderByDescending(p => p.Date),
            "Status" => ascending ? pingHistory.OrderBy(p => p.Status) : pingHistory.OrderByDescending(p => p.Status),
            _ => pingHistory
        };
    }

    private async Task DeleteAllPingHistory()
    {
        try
        {
            await PingRepository.DeleteAllPingHistoriesAsync();
            pingHistoryItems = new List<PingHistory>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas usuwania historii pingów: {ex.Message}");
        }
    }
}
