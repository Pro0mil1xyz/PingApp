@page "/MyComponents/devices"
@using PingApp.Models
@using PingApp.Repositories
@inject IDeviceRepository DeviceRepository
@inject ICategoryRepository CategoryRepository
@inject IDeviceGroupRepository DeviceGroupRepository
@inject IJSRuntime JSRuntime

<h3>Urządzenia</h3>

<button @onclick="ShowAddDeviceForm">Dodaj urządzenie</button>

@if (DeviceList == null)
{
    <p>Ładowanie urządzeń...</p>
}
else
{
    <div class="scrollable-table-container" style="overflow-y: auto;">
        <table class="table table-striped table-bordered">
            <thead class="sticky-top" style="top: 0; z-index: 2;">
                <tr>
                    <th @onclick="@(() => SortTable("Id"))" style="cursor: pointer;">
                        Id
                        @if (CurrentSortColumn == "Id")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortTable("Name"))" style="cursor: pointer;">
                        Nazwa
                        @if (CurrentSortColumn == "Name")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortTable("IPAddress"))" style="cursor: pointer;">
                        Adres IP
                        @if (CurrentSortColumn == "IPAddress")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortTable("Category"))" style="cursor: pointer;">
                        Kategoria
                        @if (CurrentSortColumn == "Category")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortTable("Group"))" style="cursor: pointer;">
                        Grupa
                        @if (CurrentSortColumn == "Group")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th>Akcje</th>
                </tr>
            </thead>

            @if (FirstVisibleDevice != null)
            {
                <tbody>
                    <tr class="table-primary sticky-top" style="top: 35px; z-index: 1;">
                        <td>@FirstVisibleDevice.Id</td>
                        <td>@FirstVisibleDevice.Name</td>
                        <td>@FirstVisibleDevice.IPAddress</td>
                        <td>@FirstVisibleDevice.Category?.CategoryName</td>
                        <td>@FirstVisibleDevice.Group?.GroupName</td>
                        <td>
                            <button @onclick="() => EditDevice(FirstVisibleDevice)">Edytuj</button>
                            <button @onclick="() => DeleteDevice(FirstVisibleDevice.Id)">Usuń</button>
                        </td>
                    </tr>
                </tbody>
            }

            <tbody>
                @foreach (var device in SortedDeviceList)
                {
                    <tr>
                        <td>@device.Id</td>
                        <td>@device.Name</td>
                        <td>@device.IPAddress</td>
                        <td>@device.Category?.CategoryName</td>
                        <td>@device.Group?.GroupName</td>
                        <td>
                            <button @onclick="() => EditDevice(device)">Edytuj</button>
                            <button @onclick="() => DeleteDevice(device.Id)">Usuń</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (IsAddEditFormVisible)
{
    <div class="modal">
        <div class="modal-content">
            <h3 style="text-align:center;">@(IsEditing ? "Edycja urządzenia" : "Dodaj urządzenie")</h3>

            <label for="deviceName">Nazwa urządzenia:</label>
            <input type="text" id="deviceName" @bind="DeviceForm.Name" />

            <label for="deviceIP">Adres IP:</label>
            <input type="text" id="deviceIP" @bind="DeviceForm.IPAddress" />

            <label for="categorySelect">Kategoria:</label>
            <select id="categorySelect" @bind="DeviceForm.CategoryId">
                <option value="">Wybierz kategorię</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.CategoryName</option>
                }
            </select>

            <label for="groupSelect">Grupa:</label>
            <select id="groupSelect" @bind="DeviceForm.GroupId">
                <option value="">Wybierz grupę</option>
                @foreach (var group in DeviceGroups)
                {
                    <option value="@group.Id">@group.GroupName</option>
                }
            </select>

            <br />
            <button @onclick="SaveDevice">Zapisz</button>
            <button @onclick="CancelAddEdit" style="width: 100%; margin-top: 5px; background: #999;">Anuluj</button>
        </div>
    </div>
}

@code {
    private IEnumerable<Device> DeviceList;
    private IEnumerable<Device> SortedDeviceList = new List<Device>();
    private Device? FirstVisibleDevice;
    private Device DeviceForm = new Device();
    private bool IsAddEditFormVisible = false;
    private bool IsEditing = false;
    private IEnumerable<Category> Categories;
    private IEnumerable<DeviceGroup> DeviceGroups;
    private string CurrentSortColumn = "Id";
    private bool SortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        var allDevices = await DeviceRepository.GetAllDevicesAsync() ?? new List<Device>();
        Categories = await CategoryRepository.GetAllCategoriesAsync();
        DeviceGroups = await DeviceGroupRepository.GetAllDeviceGroupsAsync();

        DeviceList = allDevices;
        UpdateSortedDevices(DeviceList);
    }

    private void ShowAddDeviceForm()
    {
        IsEditing = false;
        DeviceForm = new Device();
        IsAddEditFormVisible = true;
    }

    private void EditDevice(Device device)
    {
        IsEditing = true;
        DeviceForm = new Device
            {
                Id = device.Id,
                Name = device.Name,
                IPAddress = device.IPAddress,
                CategoryId = device.CategoryId,
                GroupId = device.GroupId
            };
        IsAddEditFormVisible = true;
    }

    private async Task SaveDevice()
    {
        if (IsEditing)
        {
            await DeviceRepository.UpdateDeviceAsync(DeviceForm);
        }
        else
        {
            await DeviceRepository.AddDeviceAsync(DeviceForm);
        }

        IsAddEditFormVisible = false;
        DeviceList = await DeviceRepository.GetAllDevicesAsync();
        UpdateSortedDevices(DeviceList);
    }

    private void CancelAddEdit()
    {
        IsAddEditFormVisible = false;
    }

    private async Task DeleteDevice(int id)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Czy na pewno chcesz usunąć to urządzenie?");
        if (confirmDelete)
        {
            await DeviceRepository.DeleteDeviceAsync(id);
            DeviceList = await DeviceRepository.GetAllDevicesAsync();
            UpdateSortedDevices(DeviceList);
        }
    }

    private void SortTable(string column)
    {
        if (CurrentSortColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            CurrentSortColumn = column;
            SortAscending = true;
        }

        UpdateSortedDevices(DeviceList);
    }

    private void UpdateSortedDevices(IEnumerable<Device> devices)
    {
        var sorted = SortDevices(devices, CurrentSortColumn, SortAscending).ToList();
        FirstVisibleDevice = sorted.FirstOrDefault();
        SortedDeviceList = sorted.Skip(1);
    }

    private IEnumerable<Device> SortDevices(IEnumerable<Device> devices, string column, bool ascending)
    {
        return column switch
        {
            "Id" => ascending ? devices.OrderBy(d => d.Id) : devices.OrderByDescending(d => d.Id),
            "Name" => ascending ? devices.OrderBy(d => d.Name) : devices.OrderByDescending(d => d.Name),
            "IPAddress" => ascending ? devices.OrderBy(d => d.IPAddress) : devices.OrderByDescending(d => d.IPAddress),
            "Category" => ascending ? devices.OrderBy(d => d.Category?.CategoryName) : devices.OrderByDescending(d => d.Category?.CategoryName),
            "Group" => ascending ? devices.OrderBy(d => d.Group?.GroupName) : devices.OrderByDescending(d => d.Group?.GroupName),
            _ => devices
        };
    }
}
