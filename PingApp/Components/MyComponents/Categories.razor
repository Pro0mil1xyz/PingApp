@page "/MyComponents/categories"
@using PingApp.Models
@using PingApp.Repositories
@inject ICategoryRepository CategoryRepository
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<h3>Kategorie</h3>

<button @onclick="() => ShowAddCategoryForm()">Dodaj kategorię</button>

@if (CategoryList == null)
{
    <p>Ładowanie kategorii...</p>
}
else
{
    <div class="scrollable-table-container">
        <table class="table table-striped">
            <thead class="sticky-header">
                <tr>
                    <th @onclick="@(() => SortBy("Id"))" style="cursor: pointer;">
                        Id
                        @if (CurrentSortColumn == "Id")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th @onclick="@(() => SortBy("CategoryName"))" style="cursor: pointer;">
                        Nazwa
                        @if (CurrentSortColumn == "CategoryName")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>

                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in SortedCategoryList)
                {
                    <tr>
                        <td>@category.Id</td>
                        <td>@category.CategoryName</td>
                        <td>
                            <button @onclick="() => EditCategory(category)">Edytuj</button>
                            <button @onclick="() => DeleteCategory(category.Id)">Usuń</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (IsAddEditFormVisible)
    {
        <div class="modal">
            <div class="modal-content">
                <h3>@(IsEditing ? "Edycja kategorii" : "Dodaj kategorię")</h3>
                <label for="categoryName">Nazwa kategorii:</label>
                <input type="text" id="categoryName" @bind="CategoryForm.CategoryName" />
                <button @onclick="SaveCategory">Zapisz</button>
                <button @onclick="CancelAddEdit" style="width: 100%; margin-top: 5px; background: #999;">Anuluj</button>
            </div>
        </div>
    }
}

@code {
    private IEnumerable<Category> CategoryList;
    private IEnumerable<Category> SortedCategoryList => SortCategories(CategoryList);
    private string CurrentSortColumn = "CategoryName";
    private bool SortAscending = true;

    private Category CategoryForm = new Category();
    private bool IsAddEditFormVisible = false;
    private bool IsEditing = false;

    protected override async Task OnInitializedAsync()
    {
        CategoryList = await CategoryRepository.GetAllCategoriesAsync() ?? new List<Category>();
    }

    private void SortBy(string column)
    {
        if (CurrentSortColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            CurrentSortColumn = column;
            SortAscending = true;
        }
    }

    private IEnumerable<Category> SortCategories(IEnumerable<Category> categories)
    {
        return CurrentSortColumn switch
        {
            "Id" => SortAscending ? categories.OrderBy(c => c.Id) : categories.OrderByDescending(c => c.Id),
            "CategoryName" => SortAscending ? categories.OrderBy(c => c.CategoryName) : categories.OrderByDescending(c => c.CategoryName),
            _ => categories
        };
    }

    private void ShowAddCategoryForm()
    {
        IsEditing = false;
        CategoryForm = new Category();
        IsAddEditFormVisible = true;
    }

    private void EditCategory(Category category)
    {
        IsEditing = true;
        CategoryForm = new Category
            {
                Id = category.Id,
                CategoryName = category.CategoryName
            };
        IsAddEditFormVisible = true;
    }

    private async Task SaveCategory()
    {
        if (IsEditing)
        {
            await CategoryRepository.UpdateCategoryAsync(CategoryForm);
        }
        else
        {
            await CategoryRepository.AddCategoryAsync(CategoryForm);
        }

        IsAddEditFormVisible = false;
        CategoryList = await CategoryRepository.GetAllCategoriesAsync();
    }

    private void CancelAddEdit()
    {
        IsAddEditFormVisible = false;
    }

    private async Task DeleteCategory(int id)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Czy na pewno chcesz usunąć tę kategorię?" });
        if (confirmDelete)
        {
            await CategoryRepository.DeleteCategoryAsync(id);
            CategoryList = await CategoryRepository.GetAllCategoriesAsync();
        }
    }
}
