@page "/MyComponents/devicegroups"
@using PingApp.Models
@using PingApp.Repositories
@inject IDeviceGroupRepository DeviceGroupRepository
@inject IJSRuntime JSRuntime

<h3>Grupy urządzeń</h3>

<button @onclick="ShowAddDeviceGroupForm">Dodaj grupę</button>

@if (DeviceGroupList == null)
{
    <p>Ładowanie grup urządzeń...</p>
}
else
{
    <div class="scrollable-table-container" style="overflow-y: auto;">
        <table class="table table-striped table-bordered">
            <thead class="sticky-top" style="top: 0; z-index: 2;">
                <tr>
                    <th @onclick="@(() => SortBy("Id"))" style="cursor: pointer;">
                        Id
                        @if (CurrentSortColumn == "Id")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>
                    <th @onclick="@(() => SortBy("GroupName"))" style="cursor: pointer;">
                        Nazwa grupy
                        @if (CurrentSortColumn == "GroupName")
                        {
                            <span>@(SortAscending ? "↑" : "↓")</span>
                        }
                    </th>
                    <th>Akcje</th>
                </tr>
            </thead>

            @if (FirstVisibleGroup != null)
            {
                <tbody>
                    <tr class="table-primary sticky-top" style="top: 35px; z-index: 1;">
                        <td>@FirstVisibleGroup.Id</td>
                        <td>@FirstVisibleGroup.GroupName</td>
                        <td>
                            <button @onclick="() => EditDeviceGroup(FirstVisibleGroup)">Edytuj</button>
                            <button @onclick="() => DeleteDeviceGroup(FirstVisibleGroup.Id)">Usuń</button>
                        </td>
                    </tr>
                </tbody>
            }

            <tbody>
                @foreach (var group in SortedDeviceGroups)
                {
                    <tr>
                        <td>@group.Id</td>
                        <td>@group.GroupName</td>
                        <td>
                            <button @onclick="() => EditDeviceGroup(group)">Edytuj</button>
                            <button @onclick="() => DeleteDeviceGroup(group.Id)">Usuń</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (IsAddEditFormVisible)
{
    <div class="modal">
        <div class="modal-content">
            <h3 style="text-align:center;">@(IsEditing ? "Edycja grupy" : "Dodaj grupę")</h3>

            <label for="groupName">Nazwa grupy:</label>
            <input type="text" id="groupName" @bind="DeviceGroupForm.GroupName" />

            <br />

            <button @onclick="SaveDeviceGroup">Zapisz</button>
            <button @onclick="CancelAddEdit" style="width: 100%; margin-top: 5px; background: #999;">Anuluj</button>
        </div>
    </div>
}

@code {
    private IEnumerable<DeviceGroup> DeviceGroupList;
    private IEnumerable<DeviceGroup> SortedDeviceGroups = new List<DeviceGroup>();
    private DeviceGroup? FirstVisibleGroup;

    private DeviceGroup DeviceGroupForm = new DeviceGroup();
    private bool IsAddEditFormVisible = false;
    private bool IsEditing = false;

    private string CurrentSortColumn = "Id";
    private bool SortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        var list = await DeviceGroupRepository.GetAllDeviceGroupsAsync() ?? new List<DeviceGroup>();
        UpdateSortedGroups(list);
    }

    private void SortBy(string column)
    {
        if (CurrentSortColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            CurrentSortColumn = column;
            SortAscending = true;
        }

        UpdateSortedGroups(DeviceGroupList);
    }

    private void UpdateSortedGroups(IEnumerable<DeviceGroup> groups)
    {
        DeviceGroupList = groups;
        var sorted = SortGroups(groups).ToList();
        FirstVisibleGroup = sorted.FirstOrDefault();
        SortedDeviceGroups = sorted.Skip(1);
    }

    private IEnumerable<DeviceGroup> SortGroups(IEnumerable<DeviceGroup> groups)
    {
        return CurrentSortColumn switch
        {
            "Id" => SortAscending ? groups.OrderBy(g => g.Id) : groups.OrderByDescending(g => g.Id),
            "GroupName" => SortAscending ? groups.OrderBy(g => g.GroupName) : groups.OrderByDescending(g => g.GroupName),
            _ => groups
        };
    }

    private void ShowAddDeviceGroupForm()
    {
        IsEditing = false;
        DeviceGroupForm = new DeviceGroup();
        IsAddEditFormVisible = true;
    }

    private void EditDeviceGroup(DeviceGroup group)
    {
        IsEditing = true;
        DeviceGroupForm = new DeviceGroup
            {
                Id = group.Id,
                GroupName = group.GroupName
            };
        IsAddEditFormVisible = true;
    }

    private async Task SaveDeviceGroup()
    {
        if (IsEditing)
        {
            await DeviceGroupRepository.UpdateDeviceGroupAsync(DeviceGroupForm);
        }
        else
        {
            await DeviceGroupRepository.AddDeviceGroupAsync(DeviceGroupForm);
        }

        IsAddEditFormVisible = false;
        var updated = await DeviceGroupRepository.GetAllDeviceGroupsAsync();
        UpdateSortedGroups(updated);
    }

    private void CancelAddEdit()
    {
        IsAddEditFormVisible = false;
    }

    private async Task DeleteDeviceGroup(int id)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Czy na pewno chcesz usunąć tę grupę?");
        if (confirmDelete)
        {
            await DeviceGroupRepository.DeleteDeviceGroupAsync(id);
            var updated = await DeviceGroupRepository.GetAllDeviceGroupsAsync();
            UpdateSortedGroups(updated);
        }
    }
}
