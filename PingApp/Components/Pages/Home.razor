@page "/"
@using PingApp.Models
@using PingApp.Repositories
@inject IDeviceRepository DeviceRepository
@inject IDeviceGroupRepository DeviceGroupRepository
@inject ICategoryRepository CategoryRepository
@inject IPingRepository PingRepository



<div class="IP">

    <h1>IP PINGER</h1>

    <div class="IPmanualnie">

        <!-- Pingowanie pojedynczego adresu IP -->
        IP: <input type="text" placeholder="Podaj adres IP" @bind="SingleIpAddress" />
        <button @onclick="PingSingleIp">Pinguj</button> <br /> <br />

        <!-- Pingowanie zakresu IP -->
        Zakres IP <br />
        <input type="text" placeholder="Początek zakresu" @bind="StartIpRange" />
        <input type="text" placeholder="Koniec zakresu" @bind="EndIpRange" />
        <button @onclick="PingIpRange">Pinguj zakres</button>

    </div>

    <div class="IPwybory">

        <!-- Pingowanie wszystkich urządzeń z grupy -->
        Wybierz grupe:
        @if (DeviceGroupList == null || !DeviceGroupList.Any())
        {
            <p>Ładowanie grup urządzeń...</p>
        }
        else
        {
            <select @bind="SelectedGroupId">
                @foreach (var group in DeviceGroupList)
                {
                    <option value="@group.Id">@group.GroupName</option>
                }
            </select>
            <button @onclick="PingGroup">Pinguj grupę</button>
        }
        <br /><br />

        <!-- Pingowanie wszystkich urządzeń z kategorii -->
        Wybierz kategorie:
        @if (CategoryList == null || !CategoryList.Any())
        {
            <p>Ładowanie kategorii...</p>
        }
        else
        {
            <select @bind="SelectedCategoryId">
                @foreach (var category in CategoryList)
                {
                    <option value="@category.Id">@category.CategoryName</option>
                }
            </select>
            <button @onclick="PingCategory">Pinguj kategorię</button>
        }

        <br /><br />

        <!-- Pingowanie konkretnego urządzenia -->
        Urządzenie:
        @if (DeviceList == null || !DeviceList.Any())
        {
            <p>Ładowanie urządzeń...</p>
        }
        else
        {
            <select @bind="SelectedDeviceId">
                @foreach (var device in DeviceList)
                {
                    <option value="@device.Id">@device.Name (@device.IPAddress)</option>
                }
            </select>
            <button @onclick="PingSelectedDevice">Pinguj wybrane urządzenie</button>
        }

    </div>

</div>

<div class="wynikpingowanie">

    <h2>Wyniki pingowania</h2>
    <div class="ping-results">
        @foreach (var result in PingResults)
        {
            <p>@result</p>
        }
    </div>

</div>

@code {
    private string SingleIpAddress = string.Empty;
    private string StartIpRange = string.Empty;
    private string EndIpRange = string.Empty;
    private int SelectedGroupId = 0;
    private int SelectedCategoryId = 0;
    private int SelectedDeviceId = 0;

    private IEnumerable<DeviceGroup> DeviceGroupList = new List<DeviceGroup>();
    private IEnumerable<Category> CategoryList = new List<Category>();
    private IEnumerable<Device> DeviceList = new List<Device>();
    private List<string> PingResults = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // Pobranie grup urządzeń, kategorii i urządzeń
        DeviceGroupList = await DeviceGroupRepository.GetAllDeviceGroupsAsync() ?? new List<DeviceGroup>();
        CategoryList = await CategoryRepository.GetAllCategoriesAsync() ?? new List<Category>();
        DeviceList = await DeviceRepository.GetAllDevicesAsync() ?? new List<Device>();
    }

    private async Task PingSingleIp()
    {
        if (string.IsNullOrWhiteSpace(SingleIpAddress))
        {
            PingResults.Add("Adres IP nie może być pusty.");
            return;
        }

        var result = await PingRepository.PingDeviceAsync(SingleIpAddress);
        PingResults.Add($"Ping do {SingleIpAddress}: {result}");
        PingRepository.SavePingResultAsync(SingleIpAddress, 0); // 0 oznacza brak powiązanego urządzenia
    }

    private async Task PingIpRange()
    {
        if (string.IsNullOrWhiteSpace(StartIpRange) || string.IsNullOrWhiteSpace(EndIpRange))
        {
            PingResults.Add("Zakres adresów IP nie może być pusty.");
            return;
        }

        try
        {
            var startParts = StartIpRange.Split('.').Select(int.Parse).ToArray();
            var endParts = EndIpRange.Split('.').Select(int.Parse).ToArray();

            for (int i = startParts[3]; i <= endParts[3]; i++)
            {
                var ip = $"{startParts[0]}.{startParts[1]}.{startParts[2]}.{i}";
                var result = await PingRepository.PingDeviceAsync(ip);
                PingResults.Add($"Ping do {ip}: {result}");
                await PingRepository.SavePingResultAsync(ip, 0); // 0 oznacza brak powiązanego urządzenia
            }
        }
        catch
        {
            PingResults.Add("Niepoprawny zakres adresów IP.");
        }
    }

    private async Task PingGroup()
    {
        var devices = await DeviceRepository.GetDevicesByGroupIdAsync(SelectedGroupId);
        if (!devices.Any())
        {
            PingResults.Add("Brak urządzeń w wybranej grupie.");
            return;
        }

        foreach (var device in devices)
        {
            var result = await PingRepository.PingDeviceAsync(device.IPAddress);
            PingResults.Add($"Ping do {device.Name} ({device.IPAddress}): {result}");
            await PingRepository.SavePingResultAsync(device.IPAddress, device.Id);
        }
    }

    private async Task PingCategory()
    {
        var devices = await DeviceRepository.GetDevicesByCategoryIdAsync(SelectedCategoryId);
        if (!devices.Any())
        {
            PingResults.Add("Brak urządzeń w wybranej kategorii.");
            return;
        }

        foreach (var device in devices)
        {
            var result = await PingRepository.PingDeviceAsync(device.IPAddress);
            PingResults.Add($"Ping do {device.Name} ({device.IPAddress}): {result}");
            await PingRepository.SavePingResultAsync(device.IPAddress, device.Id);
        }
    }

    private async Task PingSelectedDevice()
    {
        var device = DeviceList.FirstOrDefault(d => d.Id == SelectedDeviceId);
        if (device == null)
        {
            PingResults.Add("Nie znaleziono wybranego urządzenia.");
            return;
        }

        var result = await PingRepository.PingDeviceAsync(device.IPAddress);
        PingResults.Add($"Ping do {device.Name} ({device.IPAddress}): {result}");
        await PingRepository.SavePingResultAsync(device.IPAddress, device.Id);
    }
}
