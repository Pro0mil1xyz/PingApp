@page "/"
@using PingApp.Models
@using PingApp.Repositories
@inject IDeviceRepository DeviceRepository
@inject IDeviceGroupRepository DeviceGroupRepository
@inject ICategoryRepository CategoryRepository
@inject IPingRepository PingRepository

<div class="IP">
    <h1>
        <img src="https://cdn3.emoji.gg/emojis/5394-pepe.png" width="32px" height="32px" alt="_pepe">
        IP PINGER
        <img src="https://cdn3.emoji.gg/emojis/5394-pepe.png" width="32px" height="32px" alt="_pepe">
    </h1>

    <div class="IPmanualnie">
        IP:
        <input type="text" placeholder="Podaj adres IP" @bind="SingleIpAddress" oninput="this.value = this.value.replace(/[^0-9.]/g, '')" />
        <button @onclick="PingSingleIp">
            Pinguj
            <img src="https://cdn3.emoji.gg/emojis/91716-chechbw.gif" width="16px" height="16px" alt="chechbw">
        </button>
        <br />

        Zakres IP
        <input type="text" placeholder="Początek zakresu" @bind="StartIpRange" oninput="this.value = this.value.replace(/[^0-9.]/g, '')" />
        <input type="text" placeholder="Koniec zakresu" @bind="EndIpRange" oninput="this.value = this.value.replace(/[^0-9.]/g, '')" />
        <button @onclick="PingIpRange">
            Pinguj zakres
            <img src="https://cdn3.emoji.gg/emojis/91716-chechbw.gif" width="16px" height="16px" alt="chechbw">
        </button>
        <br />

        Dodatkowe opcje: <br />
        <button class="btn btn-danger" @onclick="CancelPing">STOP PING</button>
    </div>

    <div class="ladowanie">
        @if (IsPingInProgress)
        {
            <div class="loader-container">
                <div class="loaderdot"></div>
            </div>
        }
        else if (WasPingCancelled)
        {
            <div class="ping-summary">
                <p style="color: darkorange; font-weight: bold;">⚠️ Pingowanie zatrzymane!</p>
            </div>
        }
    </div>
</div>

<div class="wynikpingowanie">
    <h2>Wyniki pingowania</h2>
    <div class="ping-results">
        @foreach (var result in PingResults)
        {
            <p>@result</p>
        }
    </div>
</div>

@code {
    private string SingleIpAddress = string.Empty;
    private string StartIpRange = string.Empty;
    private string EndIpRange = string.Empty;
    private bool IsPingInProgress = false;
    private bool WasPingCancelled = false;

    private IEnumerable<DeviceGroup> DeviceGroupList = new List<DeviceGroup>();
    private IEnumerable<Category> CategoryList = new List<Category>();
    private IEnumerable<Device> DeviceList = new List<Device>();
    private List<MarkupString> PingResults = new List<MarkupString>();

    private CancellationTokenSource? PingCancellationTokenSource = null;

    protected override async Task OnInitializedAsync()
    {
        DeviceGroupList = await DeviceGroupRepository.GetAllDeviceGroupsAsync() ?? new List<DeviceGroup>();
        CategoryList = await CategoryRepository.GetAllCategoriesAsync() ?? new List<Category>();
        DeviceList = await DeviceRepository.GetAllDevicesAsync() ?? new List<Device>();
    }

    private void CancelPing()
    {
        PingCancellationTokenSource?.Cancel();
        PingCancellationTokenSource?.Dispose();
        PingCancellationTokenSource = null;
        IsPingInProgress = false;
        WasPingCancelled = true;
        StateHasChanged();
    }

    private bool IsValidIp(string ip)
    {
        return System.Net.IPAddress.TryParse(ip, out _);
    }

    private bool IsValidIpRange(string startIp, string endIp)
    {
        var startParts = startIp.Split('.').Select(int.Parse).ToArray();
        var endParts = endIp.Split('.').Select(int.Parse).ToArray();

        // Check if the first three octets match (for valid subnet).
        if (!startParts.Take(3).SequenceEqual(endParts.Take(3))) return false;

        // Check if the last octet of start is less than or equal to the last octet of end.
        if (startParts[3] > endParts[3]) return false;

        return true;
    }

    private async Task PingSingleIp()
    {
        PingResults.Clear();

        if (!IsValidIp(SingleIpAddress))
        {
            PingResults.Add((MarkupString)"<span style='color:red;'>Nieprawidłowy adres IP.</span>");
            return;
        }

        IsPingInProgress = true;
        WasPingCancelled = false;
        StateHasChanged();

        PingCancellationTokenSource = new CancellationTokenSource();
        var cancellationToken = PingCancellationTokenSource.Token;

        int packetsSent = 4;
        int packetsReceived = 0;

        PingResults.Add((MarkupString)$"Pinging {SingleIpAddress} with 32 bytes of data:");
        StateHasChanged();

        try
        {
            for (int i = 0; i < packetsSent; i++)
            {
                cancellationToken.ThrowIfCancellationRequested();

                try
                {
                    var result = await PingRepository.PingDeviceAsync(SingleIpAddress);

                    if (result.Contains("Success"))
                    {
                        int time = new Random().Next(5, 100);
                        int ttl = new Random().Next(50, 128);
                        PingResults.Add((MarkupString)$"Reply from {SingleIpAddress}: bytes=32 time={time}ms TTL={ttl} Status: <span style='color:lightgreen;'>Success</span>");
                        packetsReceived++;
                    }
                    else if (result.Contains("Request timed out"))
                    {
                        PingResults.Add((MarkupString)$"Reply from {SingleIpAddress}: Status: <span style='color:orange;'>Request timed out</span>");
                    }
                    else
                    {
                        PingResults.Add((MarkupString)$"Reply from {SingleIpAddress}: Status: <span style='color:red;'>{result}</span>");
                    }
                }
                catch (OperationCanceledException)
                {
                    WasPingCancelled = true;
                    return;
                }
                catch (Exception ex)
                {
                    PingResults.Add((MarkupString)$"<span style='color:red;'>Błąd: {ex.Message}</span>");
                }

                StateHasChanged();
                await Task.Delay(500, cancellationToken);
            }

            PingResults.Add((MarkupString)"<br>");
            PingResults.Add((MarkupString)"Ping statistics:");
            PingResults.Add((MarkupString)$"    Packets: Sent = {packetsSent}, <span style='color:lightgreen;'> Received = {packetsReceived}</span>, <span style='color:red;'> Lost = {packetsSent - packetsReceived}</span> ({(packetsSent - packetsReceived) * 100 / packetsSent}% loss)");

            var allDevices = await DeviceRepository.GetAllDevicesAsync();
            var existingDevice = allDevices.FirstOrDefault(d => d.IPAddress == SingleIpAddress);

            await PingRepository.SavePingResultAsync(SingleIpAddress, existingDevice?.Id ?? -1);
        }
        catch (OperationCanceledException)
        {
            WasPingCancelled = true;
        }
        finally
        {
            IsPingInProgress = false;
            StateHasChanged();
            PingCancellationTokenSource?.Dispose();
            PingCancellationTokenSource = null;
        }
    }

    private async Task PingIpRange()
    {
        PingResults.Clear();

        if (!IsValidIp(StartIpRange) || !IsValidIp(EndIpRange))
        {
            PingResults.Add((MarkupString)"<span style='color:red;'>Nieprawidłowy początek lub koniec zakresu IP.</span>");
            return;
        }

        if (!IsValidIpRange(StartIpRange, EndIpRange))
        {
            PingResults.Add((MarkupString)"<span style='color:red;'>Zakres IP jest nieprawidłowy.</span>");
            return;
        }

        IsPingInProgress = true;
        WasPingCancelled = false;
        StateHasChanged();

        PingCancellationTokenSource = new CancellationTokenSource();
        var cancellationToken = PingCancellationTokenSource.Token;

        int packetsSent = 0;
        int packetsReceived = 0;

        try
        {
            var startParts = StartIpRange.Split('.').Select(int.Parse).ToArray();
            var endParts = EndIpRange.Split('.').Select(int.Parse).ToArray();
            var allDevices = await DeviceRepository.GetAllDevicesAsync();
            var deviceDictionary = allDevices.ToDictionary(d => d.IPAddress, d => d.Id);

            for (int i = startParts[3]; i <= endParts[3]; i++)
            {
                var ip = $"{startParts[0]}.{startParts[1]}.{startParts[2]}.{i}";
                PingResults.Add((MarkupString)$"Pinging {ip} with 32 bytes of data:");
                StateHasChanged();

                int packetsReceivedForIp = 0;

                for (int j = 0; j < 4; j++)
                {
                    cancellationToken.ThrowIfCancellationRequested();

                    try
                    {
                        var result = await PingRepository.PingDeviceAsync(ip);

                        if (result.Contains("Success"))
                        {
                            int time = new Random().Next(5, 100);
                            int ttl = new Random().Next(50, 128);
                            PingResults.Add((MarkupString)$"Reply from {ip}: bytes=32 time={time}ms TTL={ttl} Status: <span style='color:lightgreen;'>Success</span>");
                            packetsReceived++;
                            packetsReceivedForIp++;
                        }
                        else if (result.Contains("Request timed out"))
                        {
                            PingResults.Add((MarkupString)$"Reply from {ip}: Status: <span style='color:orange;'>Request timed out</span>");
                        }
                        else
                        {
                            PingResults.Add((MarkupString)$"Reply from {ip}: Status: <span style='color:red;'>{result}</span>");
                        }
                    }
                    catch (OperationCanceledException)
                    {
                        WasPingCancelled = true;
                        return;
                    }

                    StateHasChanged();
                    await Task.Delay(500, cancellationToken);
                }

                packetsSent += 4;
                await PingRepository.SavePingResultAsync(ip, deviceDictionary.TryGetValue(ip, out var id) ? id : -1);
                await Task.Delay(1000, cancellationToken);
            }
        }
        catch (OperationCanceledException)
        {
            WasPingCancelled = true;
        }
        catch (Exception ex)
        {
            PingResults.Add((MarkupString)$"<span style='color:red;'>Nieoczekiwany błąd: {ex.Message}</span>");
        }
        finally
        {
            if (!WasPingCancelled)
            {
                PingResults.Add((MarkupString)"<br>");
                PingResults.Add((MarkupString)"Ping statistics:");
                PingResults.Add((MarkupString)$"    Packets: Sent = {packetsSent}, <span style='color:lightgreen;'> Received = {packetsReceived}</span>, <span style='color:red;'> Lost = {packetsSent - packetsReceived}</span> ({(packetsSent - packetsReceived) * 100 / packetsSent}% loss)");
                PingResults.Add((MarkupString)"<span style='color:gray;'>Pingowanie zakończone.</span>");
            }

            IsPingInProgress = false;
            StateHasChanged();
            PingCancellationTokenSource?.Dispose();
            PingCancellationTokenSource = null;
        }
    }
}
