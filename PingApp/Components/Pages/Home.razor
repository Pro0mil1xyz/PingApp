@page "/"
@using PingApp.Models
@using PingApp.Repositories
@inject IDeviceRepository DeviceRepository
@inject IDeviceGroupRepository DeviceGroupRepository
@inject ICategoryRepository CategoryRepository
@inject IPingRepository PingRepository

<h3>Strona główna - Pingowanie urządzeń</h3>

<h4>Lista urządzeń</h4>
@if (DeviceList == null)
{
    <p>Ładowanie urządzeń...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nazwa urządzenia</th>
                <th>Adres IP</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in DeviceList)
            {
                <tr>
                    <td>@device.Id</td>
                    <td>@device.Name</td>
                    <td>@device.IPAddress</td>
                    <td>
                        <button @onclick="() => PingDevice(device.IPAddress, device.Id)">Pinguj</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>Grupy urządzeń</h4>
@if (DeviceGroupList == null)
{
    <p>Ładowanie grup urządzeń...</p>
}
else
{
    <ul>
        @foreach (var group in DeviceGroupList)
        {
            <li>@group.GroupName</li>
        }
    </ul>
}

<h4>Kategorie urządzeń</h4>
@if (CategoryList == null)
{
    <p>Ładowanie kategorii...</p>
}
else
{
    <ul>
        @foreach (var category in CategoryList)
        {
            <li>@category.CategoryName</li>
        }
    </ul>
}

<h4>Wyniki pingowania</h4>
@if (!string.IsNullOrEmpty(PingResult))
{
    <p>Ostatni wynik: @PingResult</p>
}

@code {
    private IEnumerable<Device> DeviceList;
    private IEnumerable<DeviceGroup> DeviceGroupList;
    private IEnumerable<Category> CategoryList;

    private string PingResult;

    protected override async Task OnInitializedAsync()
    {
        // Pobierz dane z repozytoriów
        DeviceList = await DeviceRepository.GetAllDevicesAsync() ?? new List<Device>();
        DeviceGroupList = await DeviceGroupRepository.GetAllDeviceGroupsAsync() ?? new List<DeviceGroup>();
        CategoryList = await CategoryRepository.GetAllCategoriesAsync() ?? new List<Category>();
    }

    private async Task PingDevice(string ipAddress, int deviceId)
    {
        // Wykonanie operacji ping
        PingResult = await PingRepository.PingDeviceAsync(ipAddress);

        // Zapis wyniku pingowania w bazie danych
        await PingRepository.SavePingResultAsync(ipAddress, deviceId);
    }
}